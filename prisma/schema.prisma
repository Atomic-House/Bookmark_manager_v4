generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  defaultWs     String?
  isPremiumUser Boolean     @default(false)
  userName      String?     @unique
  background    String?
  accounts      Account[]
  lists         List[]
  sessions      Session[]
  Tab           Tab[]
  workspaces    Workspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  name   String
  userId String
  id     String  @id @default(cuid())
  email  String?
  boards Board[]
  inbox  Inbox?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Inbox {
  id          String    @id @default(cuid())
  name        String    @default("Inbox")
  email       String?
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  tabs        Tab[]
  userId      String?
}

model Board {
  name      String
  id        String    @id @default(cuid())
  isDeleted Boolean   @default(false)
  wsId      String
  email     String?
  isPublic  Boolean   @default(false)
  workspace Workspace @relation(fields: [wsId], references: [id], onDelete: Cascade)
  tabs      Tab[]
}

model Tab {
  id        String  @id @default(cuid())
  name      String
  isDeleted Boolean @default(false)
  boardId   String?
  email     String?
  isPublic  Boolean @default(false)
  userId    String?
  inboxId   String?
  lists     List[]
  board     Board?  @relation(fields: [boardId], references: [id])
  Inbox     Inbox?  @relation(fields: [inboxId], references: [id])
  User      User?   @relation(fields: [userId], references: [id])
}

model List {
  name      String
  id        String     @id @default(cuid())
  isDeleted Boolean    @default(false)
  email     String?
  isPublic  Boolean    @default(false)
  userId    String?
  tabId     String?
  color     String?    @default("#aeb0a9")
  createdAt DateTime?  @default(now())
  bookmarks Bookmark[]
  tab       Tab?       @relation(fields: [tabId], references: [id], onDelete: Cascade)
  User      User?      @relation(fields: [userId], references: [id])
}

model Bookmark {
  name        String?
  title       String?
  description String?
  url         String
  id          String    @id @default(cuid())
  isDeleted   Boolean   @default(false)
  listId      String
  favicon     String?
  tags        String[]
  createdAt   DateTime? @default(now())
  email       String?
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
}
